<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="pv_particle_vertex">
        uniform mat4 uMVPMatrix;
        uniform float uTime;
        uniform int a_OpenMouth;

        attribute vec3 a_Position;
        attribute vec3 a_Color;
        attribute vec3 a_DirectionVector;
        attribute float a_ParticleStartTime;


        varying vec3 v_Color;
        varying float v_ElapsedTime;

        void main() {

        v_Color = a_Color;

        v_ElapsedTime = uTime - a_ParticleStartTime;

        float gravityFactor = v_ElapsedTime * v_ElapsedTime / 8.0;

        vec3 currentPosition = a_Position + (a_DirectionVector * v_ElapsedTime);

        if (a_OpenMouth == 1) {
            currentPosition = a_Position + ((a_DirectionVector - a_Position) * v_ElapsedTime);
        } else {
            currentPosition.y -= gravityFactor;
        }
        gl_Position = uMVPMatrix * vec4(currentPosition, 1.0);
        gl_PointSize = 25.0;
    }\n
    </string>
    <string name="pv_particle_fragment">
        precision mediump float;

        uniform sampler2D u_TextureUnit;

        varying vec3 v_Color;
        varying float v_ElapsedTime;

        void main() {
            gl_FragColor = vec4(v_Color / v_ElapsedTime, 1.0)
                 * texture2D(u_TextureUnit, gl_PointCoord);
        }\n
    </string>

    <string name="pv_background_vertex">
        attribute vec4 a_Position;
        uniform mat4 u_Matrix;
        attribute vec2 a_Texture;
        varying vec2 v_Texture;

        void main() {
            gl_Position = u_Matrix * a_Position;
            v_Texture = a_Texture;
        }\n
    </string>
    <string name="pv_backfround_fragment">
        precision mediump float;
        uniform sampler2D u_TextureUnit;
        varying vec2 v_Texture;

        void main() {
            gl_FragColor = texture2D(u_TextureUnit, v_Texture);
        }\n
    </string>
</resources>